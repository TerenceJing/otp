<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.terence.otp</groupId>
    <artifactId>otp-ssm</artifactId>
    <packaging>pom</packaging>
    <version>1.0.0-SNAPSHOT</version>
    <modules>
        <module>otp-web</module>
        <module>otp-common</module>
    </modules>


    <properties>
        <otp.version>1.0.0-SNAPSHOT</otp.version>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <maven.compiler.source>1.7</maven.compiler.source>
        <maven.compiler.target>1.7</maven.compiler.target>
        <slf4j.version>1.7.7</slf4j.version>
        <mybatis.version>3.2.5</mybatis.version>
        <mybatis.spring.version>1.2.2</mybatis.spring.version>
    </properties>


    <dependencies>

        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.11</version>
            <scope>test</scope>
        </dependency>

        <!-- 1:日志 java日志：slf4j，log4j,logback,base-logging
                  slf4j是规范/接口
                  日志实现：log4j,loggback,base-logging
                  使用slf4j+logback
          -->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
            <version>1.7.12</version>
        </dependency>

        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-core</artifactId>
            <version>1.1.1</version>
        </dependency>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>1.16.20</version>
        </dependency>
        <!-- 实现slf4j的接口并将其整合进来 -->
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
            <version>1.1.1</version>
        </dependency>
        <!-- 2:数据库方面的依赖 ，数据库连接，数据库连接池，数据库-->
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>5.1.35</version>
        </dependency>
        <dependency>
            <groupId>postgresql</groupId>
            <artifactId>postgresql</artifactId>
            <version>9.1-901.jdbc4</version>
        </dependency>
        <dependency>
            <groupId>c3p0</groupId>
            <artifactId>c3p0</artifactId>
            <version>0.9.1.2</version>
        </dependency>

        <!--3：Servlet,json解析器-->
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
            <version>2.5.4</version>
        </dependency>
        <!--<dependency>-->
        <!--<groupId>javax.servlet</groupId>-->
        <!--<artifactId>javax.servlet-api</artifactId>-->
        <!--<version>3.1.0</version>-->
        <!--<scope>provided</scope>-->
        <!--</dependency>-->
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>servlet-api</artifactId>
            <version>2.5</version>
            <!-- 编译测试期间有效 -->
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.jboss.resteasy</groupId>
            <artifactId>resteasy-jaxrs</artifactId>
            <version>3.0.11.Final</version>
        </dependency>

        <!--4：SSM依赖-->
        <!-- 4.1：Dao持久化层框架依赖：Mybatis依赖，即Mybatis自身的依赖和 Mybatis与Spring的整合依赖-->
        <dependency>
            <groupId>org.mybatis</groupId>
            <artifactId>mybatis</artifactId>
            <version>3.3.0</version>
        </dependency>
        <!-- 4.2：mybatis自身实现的spring整合依赖
            因为Mybatis的前身ibatis出现比较早，spring提供了对ibatis的依赖，但是Mybatis出现的时候，并没有对其提供整合依赖
            所以，mybatis特意提供了对Spring的整合依赖
        -->
        <dependency>
            <groupId>org.mybatis</groupId>
            <artifactId>mybatis-spring</artifactId>
            <version>1.2.3</version>
        </dependency>
        <!-- 4.3:spring依赖 -->
        <!-- (1)Spring核心依赖 -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-core</artifactId>
            <version>4.1.7.RELEASE</version>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-beans</artifactId>
            <version>4.1.7.RELEASE</version>
        </dependency>
        <dependency><!-- Spring IOC扩展依赖 -->
            <groupId>org.springframework</groupId>
            <artifactId>spring-context</artifactId>
            <version>4.1.7.RELEASE</version>
        </dependency>
        <!--<dependency>-->
            <!--<groupId>org.springframework.boot</groupId>-->
            <!--<artifactId>spring-boot-starter-web</artifactId>-->
            <!--<version>2.1.1.RELEASE</version>-->
        <!--</dependency>-->
        <!-- (2)Spring Dao层的依赖 -->
        <dependency><!-- Spring JDBC方面的依赖 -->
            <groupId>org.springframework</groupId>
            <artifactId>spring-jdbc</artifactId>
            <version>4.1.7.RELEASE</version>
        </dependency>
        <dependency><!-- Spring 事务方面的依赖 -->
            <groupId>org.springframework</groupId>
            <artifactId>spring-tx</artifactId>
            <version>4.1.7.RELEASE</version>
        </dependency>
        <!-- (3)Spring Web相关依赖 -->
        <dependency><!-- Spring web方面的依赖:项目本身是个web工程，需要经过Servlet容器去启动 -->
            <groupId>org.springframework</groupId>
            <artifactId>spring-web</artifactId>
            <version>4.1.7.RELEASE</version>
        </dependency>
        <dependency><!-- Spring MVC依赖  ：MVC框架使用的是Spring MVC-->
            <groupId>org.springframework</groupId>
            <artifactId>spring-webmvc</artifactId>
            <version>4.1.7.RELEASE</version>
        </dependency>
        <dependency>
            <groupId>org.jboss</groupId>
            <artifactId>jboss-vfs</artifactId>
            <version>3.2.12.Final</version>
        </dependency>

        <dependency>
            <groupId>org.aspectj</groupId>
            <artifactId>aspectjweaver</artifactId>
            <version>1.6.8</version>
        </dependency>
        <dependency>
            <groupId>org.aspectj</groupId>
            <artifactId>aspectjrt</artifactId>
            <version>1.6.8</version>
        </dependency>
        <dependency>
            <groupId>aopalliance</groupId>
            <artifactId>aopalliance</artifactId>
            <version>1.0</version>
        </dependency>

    </dependencies>

    <build>
        <finalName>otp-controller</finalName>
        <pluginManagement><!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) -->
            <plugins>
                <!--<plugin>-->

                <!--<groupId>org.eclipse.jetty</groupId>-->
                <!--<artifactId>jetty-maven-plugin</artifactId>-->
                <!--<version>9.2.2.v20140723</version>-->
                <!--<executions>-->
                <!--&lt;!&ndash;  在打包成功后使用jetty：run来运行jetty服务&ndash;&gt;-->
                <!--<execution>-->
                <!--<phase>package</phase>-->
                <!--<goals>-->
                <!--<goal>run</goal>-->
                <!--</goals>-->
                <!--</execution>-->
                <!--</executions>-->
                <!--</plugin>-->
                <!--<plugin>-->
                <!--<artifactId>maven-clean-plugin</artifactId>-->
                <!--<version>3.0.0</version>-->
                <!--</plugin>-->
                <!--&lt;!&ndash; see http://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_war_packaging &ndash;&gt;-->
                <!--<plugin>-->
                <!--<artifactId>maven-resources-plugin</artifactId>-->
                <!--<version>3.0.2</version>-->
                <!--</plugin>-->
                <!--<plugin>-->
                <!--<artifactId>maven-compiler-plugin</artifactId>-->
                <!--<version>3.7.0</version>-->
                <!--</plugin>-->
                <!--<plugin>-->
                <!--<artifactId>maven-surefire-plugin</artifactId>-->
                <!--<version>2.20.1</version>-->
                <!--</plugin>-->
                <!--<plugin>-->
                <!--<artifactId>maven-war-plugin</artifactId>-->
                <!--<version>3.2.0</version>-->
                <!--</plugin>-->
                <!--<plugin>-->
                <!--<artifactId>maven-install-plugin</artifactId>-->
                <!--<version>2.5.2</version>-->
                <!--</plugin>-->
                <!--<plugin>-->
                <!--<artifactId>maven-deploy-plugin</artifactId>-->
                <!--<version>2.8.2</version>-->
                <!--</plugin>-->
                <plugin>
                    <artifactId>maven-compiler-plugin</artifactId>
                    <version>2.3.2</version>    <!-- 不指定时默认采用最新插件版本 -->
                    <configuration>
                        <!-- 根据实际情况设置 JDK -->
                        <source>1.7</source>    <!-- 源代码使用的开发版本 -->
                        <target>1.7</target>    <!-- 需要生成的目标class文件的编译版本 -->
                        <encoding>UTF-8</encoding>
                    </configuration>
                </plugin>
                <!-- Tomcat 插件配置 -->
                <plugin>
                    <groupId>org.apache.tomcat.maven</groupId>
                    <artifactId>tomcat7-maven-plugin</artifactId>
                    <version>2.2</version>
                    <configuration>
                        <!-- 使用内置的模拟Tomcat服务器 -->
                        <path>/</path>
                        <uriEncoding>UTF-8</uriEncoding>
                        <port>8080</port>
                        <mode>context</mode>
                        <contextReloadable>true</contextReloadable>
                    </configuration>
                </plugin>


            </plugins>
        </pluginManagement>
    </build>

</project>